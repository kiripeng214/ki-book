// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookAdminClient is the client API for BookAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookAdminClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
	ListBeer(ctx context.Context, in *ListBeerReq, opts ...grpc.CallOption) (*ListBeerReply, error)
	CreateBeer(ctx context.Context, in *CreateBeerReq, opts ...grpc.CallOption) (*CreateBeerReply, error)
	UpdateBeer(ctx context.Context, in *UpdateBeerReq, opts ...grpc.CallOption) (*UpdateBeerReply, error)
	DeleteBeer(ctx context.Context, in *DeleteBeerReq, opts ...grpc.CallOption) (*DeleteBeerReply, error)
	ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderReply, error)
	GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderReply, error)
	ListCustomer(ctx context.Context, in *ListCustomerReq, opts ...grpc.CallOption) (*ListCustomerReply, error)
	GetCustomer(ctx context.Context, in *GetCustomerReq, opts ...grpc.CallOption) (*GetCustomerReply, error)
}

type bookAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewBookAdminClient(cc grpc.ClientConnInterface) BookAdminClient {
	return &bookAdminClient{cc}
}

func (c *bookAdminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.BookAdmin/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAdminClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.BookAdmin/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAdminClient) ListBeer(ctx context.Context, in *ListBeerReq, opts ...grpc.CallOption) (*ListBeerReply, error) {
	out := new(ListBeerReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.BookAdmin/ListBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAdminClient) CreateBeer(ctx context.Context, in *CreateBeerReq, opts ...grpc.CallOption) (*CreateBeerReply, error) {
	out := new(CreateBeerReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.BookAdmin/CreateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAdminClient) UpdateBeer(ctx context.Context, in *UpdateBeerReq, opts ...grpc.CallOption) (*UpdateBeerReply, error) {
	out := new(UpdateBeerReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.BookAdmin/UpdateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAdminClient) DeleteBeer(ctx context.Context, in *DeleteBeerReq, opts ...grpc.CallOption) (*DeleteBeerReply, error) {
	out := new(DeleteBeerReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.BookAdmin/DeleteBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAdminClient) ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderReply, error) {
	out := new(ListOrderReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.BookAdmin/ListOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAdminClient) GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderReply, error) {
	out := new(GetOrderReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.BookAdmin/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAdminClient) ListCustomer(ctx context.Context, in *ListCustomerReq, opts ...grpc.CallOption) (*ListCustomerReply, error) {
	out := new(ListCustomerReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.BookAdmin/ListCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAdminClient) GetCustomer(ctx context.Context, in *GetCustomerReq, opts ...grpc.CallOption) (*GetCustomerReply, error) {
	out := new(GetCustomerReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.BookAdmin/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookAdminServer is the server API for BookAdmin service.
// All implementations must embed UnimplementedBookAdminServer
// for forward compatibility
type BookAdminServer interface {
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error)
	CreateBeer(context.Context, *CreateBeerReq) (*CreateBeerReply, error)
	UpdateBeer(context.Context, *UpdateBeerReq) (*UpdateBeerReply, error)
	DeleteBeer(context.Context, *DeleteBeerReq) (*DeleteBeerReply, error)
	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)
	GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error)
	ListCustomer(context.Context, *ListCustomerReq) (*ListCustomerReply, error)
	GetCustomer(context.Context, *GetCustomerReq) (*GetCustomerReply, error)
	mustEmbedUnimplementedBookAdminServer()
}

// UnimplementedBookAdminServer must be embedded to have forward compatible implementations.
type UnimplementedBookAdminServer struct {
}

func (UnimplementedBookAdminServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedBookAdminServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedBookAdminServer) ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeer not implemented")
}
func (UnimplementedBookAdminServer) CreateBeer(context.Context, *CreateBeerReq) (*CreateBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeer not implemented")
}
func (UnimplementedBookAdminServer) UpdateBeer(context.Context, *UpdateBeerReq) (*UpdateBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeer not implemented")
}
func (UnimplementedBookAdminServer) DeleteBeer(context.Context, *DeleteBeerReq) (*DeleteBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeer not implemented")
}
func (UnimplementedBookAdminServer) ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedBookAdminServer) GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedBookAdminServer) ListCustomer(context.Context, *ListCustomerReq) (*ListCustomerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomer not implemented")
}
func (UnimplementedBookAdminServer) GetCustomer(context.Context, *GetCustomerReq) (*GetCustomerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedBookAdminServer) mustEmbedUnimplementedBookAdminServer() {}

// UnsafeBookAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookAdminServer will
// result in compilation errors.
type UnsafeBookAdminServer interface {
	mustEmbedUnimplementedBookAdminServer()
}

func RegisterBookAdminServer(s grpc.ServiceRegistrar, srv BookAdminServer) {
	s.RegisterService(&BookAdmin_ServiceDesc, srv)
}

func _BookAdmin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.BookAdmin/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAdmin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAdminServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.BookAdmin/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAdminServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAdmin_ListBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAdminServer).ListBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.BookAdmin/ListBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAdminServer).ListBeer(ctx, req.(*ListBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAdmin_CreateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAdminServer).CreateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.BookAdmin/CreateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAdminServer).CreateBeer(ctx, req.(*CreateBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAdmin_UpdateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAdminServer).UpdateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.BookAdmin/UpdateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAdminServer).UpdateBeer(ctx, req.(*UpdateBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAdmin_DeleteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAdminServer).DeleteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.BookAdmin/DeleteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAdminServer).DeleteBeer(ctx, req.(*DeleteBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAdmin_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAdminServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.BookAdmin/ListOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAdminServer).ListOrder(ctx, req.(*ListOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAdmin_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAdminServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.BookAdmin/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAdminServer).GetOrder(ctx, req.(*GetOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAdmin_ListCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAdminServer).ListCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.BookAdmin/ListCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAdminServer).ListCustomer(ctx, req.(*ListCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAdmin_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAdminServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.BookAdmin/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAdminServer).GetCustomer(ctx, req.(*GetCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BookAdmin_ServiceDesc is the grpc.ServiceDesc for BookAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shop.admin.v1.BookAdmin",
	HandlerType: (*BookAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _BookAdmin_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _BookAdmin_Logout_Handler,
		},
		{
			MethodName: "ListBeer",
			Handler:    _BookAdmin_ListBeer_Handler,
		},
		{
			MethodName: "CreateBeer",
			Handler:    _BookAdmin_CreateBeer_Handler,
		},
		{
			MethodName: "UpdateBeer",
			Handler:    _BookAdmin_UpdateBeer_Handler,
		},
		{
			MethodName: "DeleteBeer",
			Handler:    _BookAdmin_DeleteBeer_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _BookAdmin_ListOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _BookAdmin_GetOrder_Handler,
		},
		{
			MethodName: "ListCustomer",
			Handler:    _BookAdmin_ListCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _BookAdmin_GetCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/v1/book_admin.proto",
}
